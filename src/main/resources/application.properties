# spring debug
debug = true
logging.level.root = TRACE

# name of the application
# used in - graph name, manager field for notification, label of GUI
eni.nms.simulator.appName = ENINetworkSimulator
# node name suffix. Eg - ComputerGeneratedNetworkNode
eni.nms.simulator.node.name.suffix = .CGNNode.com
# for future use
eni.nms.simulator.relationship.distribution.even = TRUE
# automatic event generators -
# randomly change node state
eni.nms.simulator.event.generation.randomize = FALSE
# time in seconds b/w two state changes
eni.nms.simulator.event.generation.randomize.interval = 5
# add noise events to notifications
eni.nms.simulator.event.generation.noisy = FALSE
# time in seconds b/w two events
eni.nms.simulator.event.generation.noisy.interval = 5
# event names to be used with noisy event generator
eni.nms.simulator.event.generation.noisy.events = Cell Down, Circuit Disconnected, Issue with chassis door 
# integrated rest server local IP
eni.nms.simulator.rest.server.ip = 127.0.0.1
# for now we can't change port of the integrated server
eni.nms.simulator.rest.server.port = 4567
# integrated rest service URI
eni.nms.simulator.rest.server.path = /ENINetworkSimulator
# enable sending events out to destination web service
eni.nms.simulator.rest.client.enabled = FALSE
# destination web service URL
eni.nms.simulator.rest.destination.url = http://192.168.26.138:18828
# UI related properties -
# css stylesheet
eni.nms.simulator.ui.stylesheet.file = graph-stream.css
# show UI (or use the app in headless mode)
eni.nms.simulator.ui.display = TRUE
# closing the UI causes the app to shutdown (or let it run in headless mode)
eni.nms.simulator.ui.closes.app = TRUE
# enable antialias for graphics (disable this to improve performance)
eni.nms.simulator.ui.antialias = TRUE
# enable better graphical quality (disable this to improve performance)
eni.nms.simulator.ui.quality = TRUE
# layout algorithm - how nodes interact with each other and with mouse events
# LinLog or SpringBox
eni.nms.simulator.ui.layout.algorithm = LinLog
# renderer
# for better performance use org.graphstream.ui.swingViewer.basicRenderer.SwingBasicGraphRenderer
# for better graphical quality use org.graphstream.ui.j2dviewer.J2DGraphRenderer
eni.nms.simulator.ui.renderer = org.graphstream.ui.j2dviewer.J2DGraphRenderer
# use opengl if it is available (linux) (enable this to improve performance)
eni.nms.simulator.ui.use.opengl = TRUE
# use directx if it is available (windows) (enable this to improve performance)
eni.nms.simulator.ui.use.directx = TRUE
# decrease this value to get smoother zoom effect
eni.nms.simulator.ui.zoomfactor = 0.01
# maximize the UI window on startup
eni.nms.simulator.ui.maximize = FALSE
# use page up/down for zoom in/out, and up/down/left/right keys to move the graph
# you can also zoom using mouse, but precision is not that good
eni.nms.simulator.ui.zoomWithMouse = FALSE
# click on a node to get list of connected nodes
# click and drag a node to move it
eni.nms.simulator.ui.showRelatedNodesOnClick = FALSE
# export the topology information
# exports to /topology.<format>
eni.nms.simulator.topology.export = FALSE
# supported formats: txt
# txt: parent-node <TAB> child-node <TAB> 1
eni.nms.simulator.topology.format = txt
# file, db, serialized object
eni.nms.simulator.topology.source = file
eni.nms.simulator.topology.source.config = config.json